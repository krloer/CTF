from Crypto.Util.number import *

Claire = 55273261062570739681010264595985371041157840964648656831930400272737039051430695674550183993431603054374880300877866371203703300049061418870293778716525555247365050420028002442131265779903318995941773493556476607657153053218574982820087953280789103385312094407675291305458162527974571222555474239698408297655
Nathan = 153714532490089638943440634302019370342638608386188440189192881959783074929820051906805863823269977439739733231721387770580587594320151476754629097982403461226289675323251915760027800804005182177165783713748324981002579198192281535526965247490607524643201527405171997320378953992645479404509890009940909631067
Philip = 153714532490089638943440634302019370342638608386188440189192881959783074929820051906805863823269977439739733231721387770580587594320151476754629097982403436388791287276107415728051491146797733733411303766258638176554078971606079872243153617094791186111510668210382280965706717937271892055556008324676561808976
p = 11704047120449214684801766713767261866315177584105666627543062331348798353505618579188502694984703862158734661981100139359814735453365819532009925611120553
q = 13133451267597929815230209595889945582128576895841823059261386168877787848157665232441893121353827828700460127735254532876240638133983134349675338736701539
#factordb for p and q
def is_prime(n):
  for i in range(2,n):
    if (n%i) == 0:
      return False
  return True

e = int(str(p)[:32])+int(str(q)[:32])
while not is_prime(e):
    e+=1

print(e)

d=inverse(e, phi)
# e = inverse(d, phi) -reverse

m = pow(c,d,n)
flag = long_to_bytes(m)
print(m)
print(flag)

# Edgard = int(str(Portia)[0:32])+int(str(Quincy)[0:32])
# while not isPrime(Edgard):
#     Edgard += 1