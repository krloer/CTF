import string
import itertools
import time

byte_arrays = [
[0xFB, 0x01, 0xFE, 0x01, 0xFF, 0x03, 0xFD, 0x02, 0xFF, 0x01, 0xFF, 0x01, 0xFF, 0x01, 0xFF, 0x02, 0xFD, 0x02, 0xFE, 0x02], 
[0xFF, 0x01, 0xFD, 0x02, 0xFD, 0x02, 0xFF, 0x01, 0xFE, 0x03, 0xFF, 0x01, 0xFF, 0x07, 0xFF, 0x03, 0xFF, 0x02], 
[0xFF, 0x01, 0xFF, 0x01, 0xFF, 0x02, 0xFF, 0x01, 0xFA, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFF, 0x01, 0xFC, 0x03, 0xFF, 0x01, 0xFE], 
[0x02, 0xFF, 0x05, 0xFD, 0x03, 0xFF, 0x04, 0xFF, 0x02, 0xFF, 0x05, 0xFD, 0x02, 0xFD], 
[0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x03, 0xFF, 0x01, 0xFF, 0x01, 0xFE, 0x05, 0xFF, 0x04, 0xFF, 0x01, 0xFD], 
[0x01, 0xFE, 0x02, 0xF8, 0x01, 0xF9, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0xFE, 0x01, 0xFC], 
[0xEB, 0x01, 0xF2], 
[0xFE, 0x03, 0xFC, 0x04, 0xFB, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFE, 0x01, 0xFF, 0x04, 0xFF], 
[0xFC, 0x05, 0xFD, 0x01, 0xFB, 0x01, 0xFD, 0x01, 0xFE, 0x05, 0xFC, 0x02], 
[0xFF, 0x02, 0xFC, 0x01, 0xFF, 0x04, 0xFD, 0x01, 0xFC, 0x01, 0xFF, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x02, 0xFE], 
[0xFE, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xF9, 0x01, 0xF8], 
[0x01, 0xFE, 0x05, 0xFF, 0x01, 0xF8, 0x03, 0xFE, 0x01, 0xFE, 0x01, 0xFD, 0x01, 0xFC, 0x01], 
[0xFD, 0x01, 0xF7, 0x01, 0xFE, 0x01, 0xEF, 0x01, 0xFF], 
[0x03, 0xFB, 0x04, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x02, 0xFD, 0x03, 0xFF, 0x01, 0xFF, 0x03, 0xFF, 0x02, 0xFF], 
[0xFE, 0x02, 0xFD, 0x01, 0xFF, 0x01, 0xFF, 0x01, 0xFF, 0x01, 0xF9, 0x01, 0xFF, 0x06, 0xFF, 0x03, 0xFF, 0x01, 0xFF], 
[0x01, 0xFB, 0x01, 0xFE, 0x02, 0xFF, 0x02, 0xFF, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFF, 0x05, 0xFC], 
[0x02, 0xFD, 0x01, 0xFB, 0x04, 0xFE, 0x03, 0xFE, 0x05, 0xFF, 0x02, 0xFF, 0x02, 0xFF, 0x02], 
[0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x02, 0xFE, 0x01, 0xFF, 0x07, 0xFE, 0x03, 0xFF, 0x04, 0xFF, 0x01, 0xFE, 0x01, 0xFF], 
[0x02, 0xFF, 0x01, 0xFE, 0x02, 0xFF, 0x02, 0xFE, 0x05, 0xFF, 0x01, 0xFF, 0x02, 0xFD, 0x02, 0xFF, 0x01, 0xFE, 0x02, 0xFF, 0x01], 
[0x01, 0xFD, 0x03, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x06, 0xFF, 0x01, 0xFF, 0x02, 0xFE, 0x01, 0xFF, 0x01, 0xFF, 0x03, 0xFF, 0x02], 
[0xF7, 0x01, 0xF7, 0x01, 0xFB, 0x01, 0xF6], 
[0x01, 0xFF, 0x02, 0xFE, 0x01, 0xFF, 0x09, 0xFF, 0x01, 0xFF, 0x01, 0xF9, 0x02, 0xFE, 0x01, 0xFE, 0x01], 
[0xFF, 0x09, 0xFF, 0x03, 0xFF, 0x06, 0xFF, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFD, 0x01, 0xFC], 
[0xFE, 0x01, 0xFD, 0x01, 0xFF, 0x02, 0xFB, 0x06, 0xFF, 0x02, 0xFE, 0x04, 0xFF, 0x01, 0xFC], 
[0xFE, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFD, 0x01, 0xFD, 0x01, 0xFD, 0x03, 0xFA, 0x01, 0xFE], 
[0xF8, 0x04, 0xFE, 0x02, 0xFF, 0x03, 0xFB, 0x01, 0xFE, 0x02, 0xFF, 0x01, 0xFC]
]

heap = []

def first_magic(byte_arr):
    res_arr = []

    for byte in byte_arr:
        if byte > 127:
            res = 0
            byte = 0x100 - byte
        else:
            res = 1
        for _ in range(byte):
            res_arr.append(res)
    print(res_arr)
    heap.append(res_arr)

def second_magic(guess, heap_arr):
    value = 0
    for i, b in enumerate(heap_arr):
        if b == 1:
            value += ord(guess[i])
    return value

for byte_array in byte_arrays:
    first_magic(byte_array)

for h in heap:
    print(str(sum(h)))

checks = [0x05a1, 0x07fb, 0x04eb, 0x07ef, 0x0707, 0x02ea, 0x0037, 0x05aa, 0x05cd, 0x0552, 0x0263, 0x0522, 0x0166, 0x072a, 0x05dc, 0x054b, 0x07db, 0x07c6, 0x0793, 0x07c6, 0x0116, 0x0743, 0x083f, 0x05e6, 0x0378, 0x4c8]
# print(len(checks)) - 26

def check(guess):
    for i in range(len(heap)):
        a = second_magic(guess, heap[i])
        if a != checks[i]:
            return False
    return True

eq_arr = []
charset = string.ascii_letters
for i in range(26):
    eq = f"{checks[i]} =="
    for j in range(36):
        eq += f" {charset[j]}*{heap[i][j]} +"
    eq_arr.append(eq[:-2])

k = charset[:5] + charset[-1]
for i,s in enumerate([68,85,67,84,70,123]):
    eq = f"{s} =="
    for j in range(36):
        if i == j:
            eq += f" {charset[j]}*1 + "
        else:
            eq += f" {charset[j]}*0 + "
    eq_arr.append(eq[:-3])
eq = "125 =="
for i in range(35):
    eq += f" {charset[i]}*0 +"
eq += f" {charset[35]}*1"
eq_arr.append(eq)
print(eq_arr)

# sym = ""
# for i in range(36):
#     sym += f"{charset[i]}, "
# sym = sym[:-2] + ' = symbols("'
# for i in range(36):
#     sym += f"{charset[i]}, "
# sym = sym[:-2] + '")'

# print(sym)

# charset = string.ascii_letters + string.digits + "_!?.-,=$^"

# for p in itertools.combinations(charset, 29): # :(
#     if p[0] != "a":
#         print(time.time())
#     if check("DUCTF{" + "".join(p) + "}"):
#         print("DUCTF{" + "".join(p) + "}")
